require("dotenv").config()

const {
  Client,
  GatewayIntentBits,
  EmbedBuilder,
  ActionRowBuilder,
  StringSelectMenuBuilder,
  ButtonBuilder,
  ButtonStyle,
  ModalBuilder,
  TextInputBuilder,
  TextInputStyle,
  SlashCommandBuilder,
  REST,
  Routes,
  PermissionFlagsBits,
  ActivityType,
} = require("discord.js")

const client = new Client({
  intents: [
    GatewayIntentBits.Guilds,
    GatewayIntentBits.GuildMessages,
    GatewayIntentBits.MessageContent,
    GatewayIntentBits.GuildMembers,
  ],
})

const CONFIG = {
  TOKEN: process.env.DISCORD_TOKEN,
  CLIENT_ID: process.env.CLIENT_ID,
  ADMIN_CHANNEL_ID: process.env.ADMIN_CHANNEL_ID,
  GUILD_ID: process.env.GUILD_ID,

  GAME_ROLES: {
    cs2: { id: process.env.ROLE_ID_CS2, name: "Counter-Strike 2" },
    valorant: { id: process.env.ROLE_ID_VALORANT, name: "Valorant" },
    minecraft: { id: process.env.ROLE_ID_MINECRAFT, name: "Minecraft" },
    gta: { id: process.env.ROLE_ID_GTA, name: "GTA V"  },
  },

  NOTIFICATION_ROLES: {
    updates: { id: process.env.ROLE_ID_UPDATES, name: "üì¢ –û–±–Ω–æ–≤–ª–µ–Ω–∏—è", emoji: "üì¢" },
    events: { id: process.env.ROLE_ID_EVENTS, name: "üéâ –°–æ–±—ã—Ç–∏—è", emoji: "üéâ" },
    news: { id: process.env.ROLE_ID_NEWS, name: "üì∞ –ù–æ–≤–æ—Å—Ç–∏", emoji: "üì∞" },
    giveaways: { id: process.env.ROLE_ID_GIVEAWAYS, name: "üéÅ –†–æ–∑—ã–≥—Ä—ã—à–∏", emoji: "üéÅ" },
  },

  STAFF_POSITIONS: {
    helper: {
      name: "üë• –•–µ–ª–ø–µ—Ä",
      description: "–ü–æ–º–æ—â—å –Ω–æ–≤–∏—á–∫–∞–º –∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π",
      roleId: process.env.ROLE_ID_HELPER,
    },
    moderator: {
      name: "üõ°Ô∏è –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä",
      description: "–ú–æ–¥–µ—Ä–∞—Ü–∏—è —á–∞—Ç–∞ –∏ –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ –ø–æ—Ä—è–¥–∫–∞",
      roleId: process.env.ROLE_ID_MODERATOR,
    },
    admin: {
      name: "‚ö° –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä",
      description: "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–æ–º –∏ –∫–æ–º–∞–Ω–¥–æ–π",
      roleId: process.env.ROLE_ID_ADMIN,
    },
  },
}

function validateConfig() {
  const required = [
    { key: "DISCORD_TOKEN", value: CONFIG.TOKEN },
    { key: "CLIENT_ID", value: CONFIG.CLIENT_ID },
    { key: "GUILD_ID", value: CONFIG.GUILD_ID },
    { key: "ADMIN_CHANNEL_ID", value: CONFIG.ADMIN_CHANNEL_ID },
  ]
}

const applications = new Map()

const commands = [
  new SlashCommandBuilder()
    .setName("setup-roles")
    .setDescription("–°–æ–∑–¥–∞—Ç—å –ø–∞–Ω–µ–ª—å –≤—ã–±–æ—Ä–∞ —Ä–æ–ª–µ–π")
    .setDefaultMemberPermissions(PermissionFlagsBits.Administrator),

  new SlashCommandBuilder()
    .setName("setup-staff")
    .setDescription("–°–æ–∑–¥–∞—Ç—å –ø–∞–Ω–µ–ª—å –Ω–∞–±–æ—Ä–∞ –≤ —Å—Ç–∞—Ñ—Ñ")
    .setDefaultMemberPermissions(PermissionFlagsBits.Administrator),

  new SlashCommandBuilder()
    .setName("staff-stats")
    .setDescription("–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞—è–≤–æ–∫")
    .setDefaultMemberPermissions(PermissionFlagsBits.Administrator),

  new SlashCommandBuilder()
    .setName("clear-applications")
    .setDescription("–û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –∑–∞—è–≤–∫–∏ –∏–∑ –ø–∞–º—è—Ç–∏")
    .setDefaultMemberPermissions(PermissionFlagsBits.Administrator),
]

async function registerCommands() {
  try {
    const rest = new REST({ version: "10" }).setToken(CONFIG.TOKEN)

    await rest.put(Routes.applicationGuildCommands(CONFIG.CLIENT_ID, CONFIG.GUILD_ID), { body: commands })

  } catch (error) {
  }
}

function setRandomStatus() {
  const activities = [
    { name: "–∑–∞—è–≤–∫–∏ –Ω–∞ —Å—Ç–∞—Ñ—Ñ", type: ActivityType.Watching },
    { name: "–∑–∞ –ø–æ—Ä—è–¥–∫–æ–º –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ", type: ActivityType.Watching },
    { name: "–Ω–æ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤", type: ActivityType.Listening },
    { name: "—Å–∏—Å—Ç–µ–º—É —Ä–æ–ª–µ–π", type: ActivityType.Managing },
    { name: "–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—é —Å–µ—Ä–≤–µ—Ä–∞", type: ActivityType.Competing },
  ]

  const randomActivity = activities[Math.floor(Math.random() * activities.length)]
  client.user.setActivity(randomActivity.name, { type: randomActivity.type })
}

client.once("ready", async () => {

  setRandomStatus()

  setInterval(setRandomStatus, 30000)

  await registerCommands()
})

client.on("interactionCreate", async (interaction) => {
  try {
    if (interaction.isChatInputCommand()) {
      const { commandName } = interaction

      switch (commandName) {
        case "setup-roles":
          await handleSetupRoles(interaction)
          break
        case "setup-staff":
          await handleSetupStaff(interaction)
          break
        case "staff-stats":
          await handleStaffStats(interaction)
          break
        case "clear-applications":
          await handleClearApplications(interaction)
          break
      }
    } else if (interaction.isStringSelectMenu()) {
      if (interaction.customId === "game_roles_select") {
        await handleGameRolesSelect(interaction)
      } else if (interaction.customId === "notification_roles_select") {
        await handleNotificationRolesSelect(interaction)
      } else if (interaction.customId === "staff_application_select") {
        await handleStaffApplicationSelect(interaction)
      }
    } else if (interaction.isModalSubmit()) {
      if (interaction.customId.startsWith("staff_application_modal_")) {
        await handleStaffApplicationSubmit(interaction)
      }
    } else if (interaction.isButton()) {
      if (interaction.customId.startsWith("approve_application_")) {
        await handleApplicationApproval(interaction, true)
      } else if (interaction.customId.startsWith("reject_application_")) {
        await handleApplicationApproval(interaction, false)
      }
    }
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è:", error)
    if (!interaction.replied && !interaction.deferred) {
      await interaction.reply({ content: "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞.", ephemeral: true })
    }
  }
})

async function handleSetupRoles(interaction) {
  await interaction.deferReply({ ephemeral: true })

  try {
    const gameRolesEmbed = new EmbedBuilder()
      .setTitle("üéÆ –ò–≥—Ä–æ–≤—ã–µ —Ä–æ–ª–∏")
      .setDescription(
        "–ü–æ–¥ —ç—Ç–∏–º –ø–æ—Å—Ç–æ–º –≤—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å —Å–µ–±–µ –∏–≥—Ä–æ–≤—É—é —Ä–æ–ª—å, –Ω–∞–∂–∞–≤ –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é —Ä–æ–ª–∏ –∫–Ω–æ–ø–∫—É –≤ –º–µ–Ω—é –≤—ã–±–æ—Ä–∞.",
      )
      .setColor("#7289DA")
      .setImage("https://media.discordapp.net/attachments/1176826062655721522/1389591045993402409/dbd61710-d38e-4390-935e-643a71c2cc6e.png?ex=68652d02&is=6863db82&hm=20652bc1fd5aa37b4c6ce67e4e4dbb148465d0e070d7ca73e5228757b6a58295&=&format=webp&quality=lossless&width=779&height=519")
      .setFooter({ text: "–°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–æ–ª—è–º–∏" })
      .setTimestamp()

    const gameRolesSelect = new StringSelectMenuBuilder()
      .setCustomId("game_roles_select")
      .setPlaceholder("–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω–æ–µ!")
      .setMinValues(0)
      .setMaxValues(Object.keys(CONFIG.GAME_ROLES).length)

    Object.entries(CONFIG.GAME_ROLES).forEach(([key, role]) => {
      if (role.id) {
        gameRolesSelect.addOptions({
          label: role.name,
          value: key,
          emoji: role.emoji,
        })
      }
    })

    const gameRolesRow = new ActionRowBuilder().addComponents(gameRolesSelect)

    const notificationRolesEmbed = new EmbedBuilder()
      .setTitle("üîî –†–æ–ª–∏ –æ–ø–æ–≤–µ—â–µ–Ω–∏–π")
      .setDescription(
        "–ü–æ–¥ —ç—Ç–∏–º –ø–æ—Å—Ç–æ–º –≤—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å —Å–µ–±–µ —Ä–æ–ª—å –æ–ø–æ–≤–µ—â–µ–Ω–∏–π, –Ω–∞–∂–∞–≤ –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é —Ä–æ–ª–∏ –∫–Ω–æ–ø–∫—É –≤ –º–µ–Ω—é –≤—ã–±–æ—Ä–∞.",
      )
      .setColor("#7289DA")
      .setFooter({ text: "–°–∏—Å—Ç–µ–º–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π" })
      .setTimestamp()

    const notificationRolesSelect = new StringSelectMenuBuilder()
      .setCustomId("notification_roles_select")
      .setPlaceholder("–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω–æ–µ!")
      .setMinValues(0)
      .setMaxValues(Object.keys(CONFIG.NOTIFICATION_ROLES).length)

    Object.entries(CONFIG.NOTIFICATION_ROLES).forEach(([key, role]) => {
      if (role.id) {
        notificationRolesSelect.addOptions({
          label: role.name,
          value: key,
          emoji: role.emoji,
        })
      }
    })

    const notificationRolesRow = new ActionRowBuilder().addComponents(notificationRolesSelect)

    await interaction.channel.send({ embeds: [gameRolesEmbed], components: [gameRolesRow] })
    await interaction.channel.send({ embeds: [notificationRolesEmbed], components: [notificationRolesRow] })

    await interaction.editReply({
      content:
        "‚úÖ **–ü–∞–Ω–µ–ª–∏ —Ä–æ–ª–µ–π —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω—ã!**\nüìã –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Ç–µ–ø–µ—Ä—å –º–æ–≥—É—Ç –≤—ã–±–∏—Ä–∞—Ç—å —Ä–æ–ª–∏ —á–µ—Ä–µ–∑ –≤—ã–ø–∞–¥–∞—é—â–∏–µ –º–µ–Ω—é.",
    })
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–∞–Ω–µ–ª–∏ —Ä–æ–ª–µ–π:", error)
    await interaction.editReply({ content: "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–∞–Ω–µ–ª–∏ —Ä–æ–ª–µ–π." })
  }
}

async function handleSetupStaff(interaction) {
  await interaction.deferReply({ ephemeral: true })

  try {
    const staffEmbed = new EmbedBuilder()
      .setTitle("üë• –ù–∞–±–æ—Ä –≤ —Å—Ç–∞—Ñ—Ñ")
      .setDescription(
        "üíé **–î–∞–≤–Ω–æ —Ö–æ—Ç–µ–ª –±—ã—Ç—å —á–∞—Å—Ç—å—é —Å–µ—Ä–≤–µ—Ä–∞?** –ü—Ä–æ–≤–æ–¥–∏—Ç—å –∏–≤–µ–Ω—Ç—ã, —Å–ª–µ–¥–∏—Ç—å –∑–∞ —á–∞—Ç–æ–º, –∏ —Ç.–ø?\nüíé **–¢–æ–≥–¥–∞ –∂–¥—ë–º —Ç–µ–±—è –≤ –Ω–∞—à–µ–º –¥—Ä—É–∂–Ω–æ–º –∫–æ–ª–ª–µ–∫—Ç–∏–≤–µ!**\n\nüìã –†–∞—Å—Å–º–æ—Ç—Ä–∏ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏ –Ω–∏–∂–µ –∏ –≤—ã–±–µ—Ä–∏ —Ç—É, —á—Ç–æ –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç —Ç–µ–±—è.",
      )
      .setColor("#5865F2")
      .setImage("https://media.discordapp.net/attachments/1389114437482451014/1389594393165562029/ChatGPT_Image_1_._2025_._16_11_53.png?ex=68653020&is=6863dea0&hm=1ef6c4629e69bca8962cb45cea75d318fa700f523237a0f07406219d643bd9ea&=&format=webp&quality=lossless&width=779&height=519")
      .addFields({
        name: "üë• –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏:",
        value: Object.values(CONFIG.STAFF_POSITIONS)
          .map((pos) => `${pos.name}\n*${pos.description}*`)
          .join("\n\n"),
        inline: false,
      })
      .setFooter({ text: "–°–∏—Å—Ç–µ–º–∞ –Ω–∞–±–æ—Ä–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª–∞" })
      .setTimestamp()

    const staffSelect = new StringSelectMenuBuilder()
      .setCustomId("staff_application_select")
      .setPlaceholder("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é!")

    Object.entries(CONFIG.STAFF_POSITIONS).forEach(([key, position]) => {
      staffSelect.addOptions({
        label: position.name,
        value: key,
        description: position.description,
      })
    })

    const staffRow = new ActionRowBuilder().addComponents(staffSelect)

    await interaction.channel.send({ embeds: [staffEmbed], components: [staffRow] })

    await interaction.editReply({
      content:
        "‚úÖ **–ü–∞–Ω–µ–ª—å –Ω–∞–±–æ—Ä–∞ –≤ —Å—Ç–∞—Ñ—Ñ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!**\nüìã –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Ç–µ–ø–µ—Ä—å –º–æ–≥—É—Ç –ø–æ–¥–∞–≤–∞—Ç—å –∑–∞—è–≤–∫–∏ –Ω–∞ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏.",
    })
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–∞–Ω–µ–ª–∏ —Å—Ç–∞—Ñ—Ñ–∞:", error)
    await interaction.editReply({ content: "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–∞–Ω–µ–ª–∏ –Ω–∞–±–æ—Ä–∞ –≤ —Å—Ç–∞—Ñ—Ñ." })
  }
}

async function handleStaffStats(interaction) {
  const totalApplications = applications.size
  const applicationsByPosition = {}

  applications.forEach((app) => {
    applicationsByPosition[app.position] = (applicationsByPosition[app.position] || 0) + 1
  })

  const statsEmbed = new EmbedBuilder()
    .setTitle("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞—è–≤–æ–∫")
    .setColor("#00FF00")
    .addFields(
      { name: "üìã –í—Å–µ–≥–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞—è–≤–æ–∫", value: totalApplications.toString(), inline: true },
      { name: "‚è∞ –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ", value: `<t:${Math.floor(Date.now() / 1000)}:R>`, inline: true },
    )
    .setFooter({ text: "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã" })
    .setTimestamp()

  if (totalApplications > 0) {
    const positionStats = Object.entries(applicationsByPosition)
      .map(([pos, count]) => `${CONFIG.STAFF_POSITIONS[pos]?.name || pos}: **${count}**`)
      .join("\n")

    statsEmbed.addFields({ name: "üìà –ü–æ –¥–æ–ª–∂–Ω–æ—Å—Ç—è–º", value: positionStats, inline: false })
  }

  await interaction.reply({ embeds: [statsEmbed], ephemeral: true })
}

async function handleClearApplications(interaction) {
  const count = applications.size
  applications.clear()

  const clearEmbed = new EmbedBuilder()
    .setTitle("üóëÔ∏è –ó–∞—è–≤–∫–∏ –æ—á–∏—â–µ–Ω—ã")
    .setDescription(`–£—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ **${count}** –∑–∞—è–≤–æ–∫ –∏–∑ –ø–∞–º—è—Ç–∏.`)
    .setColor("#FF6B6B")
    .setFooter({ text: "–û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Å–∏—Å—Ç–µ–º—ã" })
    .setTimestamp()

  await interaction.reply({ embeds: [clearEmbed], ephemeral: true })
}

async function handleGameRolesSelect(interaction) {
  const member = interaction.member
  const selectedRoles = interaction.values

  const allGameRoleIds = Object.values(CONFIG.GAME_ROLES)
    .map((role) => role.id)
    .filter((id) => id)
  const rolesToRemove = member.roles.cache.filter((role) => allGameRoleIds.includes(role.id))

  if (rolesToRemove.size > 0) {
    await member.roles.remove(rolesToRemove)
  }

  const rolesToAdd = selectedRoles.map((roleKey) => CONFIG.GAME_ROLES[roleKey].id).filter((id) => id)
  if (rolesToAdd.length > 0) {
    await member.roles.add(rolesToAdd)
  }

  const roleNames = selectedRoles.map((roleKey) => CONFIG.GAME_ROLES[roleKey].name).join(", ")
  const responseText =
    selectedRoles.length > 0
      ? `‚úÖ **–ò–≥—Ä–æ–≤—ã–µ —Ä–æ–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!**\nüéÆ –í—ã–¥–∞–Ω—ã —Ä–æ–ª–∏: ${roleNames}`
      : "‚úÖ **–í—Å–µ –∏–≥—Ä–æ–≤—ã–µ —Ä–æ–ª–∏ —Å–Ω—è—Ç—ã**\nüéÆ –£ –≤–∞—Å –±–æ–ª—å—à–µ –Ω–µ—Ç –∏–≥—Ä–æ–≤—ã—Ö —Ä–æ–ª–µ–π"

  await interaction.reply({ content: responseText, ephemeral: true })
}

async function handleNotificationRolesSelect(interaction) {
  const member = interaction.member
  const selectedRoles = interaction.values

  const allNotificationRoleIds = Object.values(CONFIG.NOTIFICATION_ROLES)
    .map((role) => role.id)
    .filter((id) => id)
  const rolesToRemove = member.roles.cache.filter((role) => allNotificationRoleIds.includes(role.id))

  if (rolesToRemove.size > 0) {
    await member.roles.remove(rolesToRemove)
  }

  const rolesToAdd = selectedRoles.map((roleKey) => CONFIG.NOTIFICATION_ROLES[roleKey].id).filter((id) => id)
  if (rolesToAdd.length > 0) {
    await member.roles.add(rolesToAdd)
  }

  const roleNames = selectedRoles.map((roleKey) => CONFIG.NOTIFICATION_ROLES[roleKey].name).join(", ")
  const responseText =
    selectedRoles.length > 0
      ? `‚úÖ **–†–æ–ª–∏ –æ–ø–æ–≤–µ—â–µ–Ω–∏–π –æ–±–Ω–æ–≤–ª–µ–Ω—ã!**\nüîî –í—ã–¥–∞–Ω—ã —Ä–æ–ª–∏: ${roleNames}`
      : "‚úÖ **–í—Å–µ —Ä–æ–ª–∏ –æ–ø–æ–≤–µ—â–µ–Ω–∏–π —Å–Ω—è—Ç—ã**\nüîî –í—ã –±–æ–ª—å—à–µ –Ω–µ –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"

  await interaction.reply({ content: responseText, ephemeral: true })
}

async function handleStaffApplicationSelect(interaction) {
  const position = interaction.values[0]
  const positionName = CONFIG.STAFF_POSITIONS[position].name

  const existingApplication = Array.from(applications.values()).find((app) => app.userId === interaction.user.id)
  if (existingApplication) {
    await interaction.reply({
      content: `‚ùå **–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –∑–∞—è–≤–∫–∞!**\n\nüìã **ID –∑–∞—è–≤–∫–∏:** \`${existingApplication.id}\`\nüíº **–î–æ–ª–∂–Ω–æ—Å—Ç—å:** ${existingApplication.positionName}\n‚è∞ **–ü–æ–¥–∞–Ω–∞:** <t:${Math.floor(existingApplication.timestamp.getTime() / 1000)}:R>\n\n‚è≥ –î–æ–∂–¥–∏—Ç–µ—Å—å —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–π –∑–∞—è–≤–∫–∏ –ø–µ—Ä–µ–¥ –ø–æ–¥–∞—á–µ–π –Ω–æ–≤–æ–π.`,
      ephemeral: true,
    })
    return
  }

  const modal = new ModalBuilder()
    .setCustomId(`staff_application_modal_${position}`)
    .setTitle(`–ó–∞—è–≤–∫–∞: ${positionName}`)

  const nameInput = new TextInputBuilder()
    .setCustomId("applicant_name")
    .setLabel("–í–∞—à–µ –∏–º—è")
    .setStyle(TextInputStyle.Short)
    .setRequired(true)
    .setMaxLength(50)
    .setPlaceholder("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ —Ä–µ–∞–ª—å–Ω–æ–µ –∏–º—è")

  const ageInput = new TextInputBuilder()
    .setCustomId("applicant_age")
    .setLabel("–í–∞—à –≤–æ–∑—Ä–∞—Å—Ç")
    .setStyle(TextInputStyle.Short)
    .setRequired(true)
    .setMaxLength(3)
    .setPlaceholder("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç (—Ü–∏—Ñ—Ä–∞–º–∏)")

  const whyUsInput = new TextInputBuilder()
    .setCustomId("why_us")
    .setLabel("–ü–æ—á–µ–º—É –∏–º–µ–Ω–Ω–æ –º—ã?")
    .setStyle(TextInputStyle.Paragraph)
    .setRequired(true)
    .setMaxLength(1000)
    .setPlaceholder("–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ, —á—Ç–æ –ø—Ä–∏–≤–ª–µ–∫–∞–µ—Ç –≤–∞—Å –≤ –Ω–∞—à–µ–º —Å–µ—Ä–≤–µ—Ä–µ...")

  const hobbiesInput = new TextInputBuilder()
    .setCustomId("hobbies")
    .setLabel("–ß–µ–º —É–≤–ª–µ–∫–∞–µ—Ç–µ—Å—å?")
    .setStyle(TextInputStyle.Paragraph)
    .setRequired(true)
    .setMaxLength(500)
    .setPlaceholder("–û–ø–∏—à–∏—Ç–µ –≤–∞—à–∏ —É–≤–ª–µ—á–µ–Ω–∏—è –∏ –∏–Ω—Ç–µ—Ä–µ—Å—ã...")

  const experienceInput = new TextInputBuilder()
    .setCustomId("experience")
    .setLabel("–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã –≤ –¥–∞–Ω–Ω–æ–π —Å—Ñ–µ—Ä–µ")
    .setStyle(TextInputStyle.Paragraph)
    .setRequired(false)
    .setMaxLength(1000)
    .setPlaceholder("–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ –≤–∞—à–µ–º –æ–ø—ã—Ç–µ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)...")

  modal.addComponents(
    new ActionRowBuilder().addComponents(nameInput),
    new ActionRowBuilder().addComponents(ageInput),
    new ActionRowBuilder().addComponents(whyUsInput),
    new ActionRowBuilder().addComponents(hobbiesInput),
    new ActionRowBuilder().addComponents(experienceInput),
  )

  await interaction.showModal(modal)
}

async function handleStaffApplicationSubmit(interaction) {
  const position = interaction.customId.split("_")[3]
  const positionName = CONFIG.STAFF_POSITIONS[position].name

  const applicationData = {
    id: Date.now().toString(),
    userId: interaction.user.id,
    username: interaction.user.username,
    displayName: interaction.user.displayName || interaction.user.username,
    position: position,
    positionName: positionName,
    name: interaction.fields.getTextInputValue("applicant_name"),
    age: interaction.fields.getTextInputValue("applicant_age"),
    whyUs: interaction.fields.getTextInputValue("why_us"),
    hobbies: interaction.fields.getTextInputValue("hobbies"),
    experience: interaction.fields.getTextInputValue("experience") || "–ù–µ —É–∫–∞–∑–∞–Ω–æ",
    timestamp: new Date(),
  }

  applications.set(applicationData.id, applicationData)

  const adminChannel = client.channels.cache.get(CONFIG.ADMIN_CHANNEL_ID)
  if (adminChannel) {
    const applicationEmbed = new EmbedBuilder()
      .setTitle("üìã –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –¥–æ–ª–∂–Ω–æ—Å—Ç—å")
      .setColor("#00FF00")
      .setDescription(`**–ü–æ—Å—Ç—É–ø–∏–ª–∞ –Ω–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ**`)
      .addFields(
        {
          name: "üë§ –ö–∞–Ω–¥–∏–¥–∞—Ç",
          value: `<@${applicationData.userId}>\n\`${applicationData.displayName}\``,
          inline: true,
        },
        { name: "üíº –î–æ–ª–∂–Ω–æ—Å—Ç—å", value: applicationData.positionName, inline: true },
        { name: "üÜî ID –∑–∞—è–≤–∫–∏", value: `\`${applicationData.id}\``, inline: true },
        { name: "üìù –ò–º—è", value: applicationData.name, inline: true },
        { name: "üéÇ –í–æ–∑—Ä–∞—Å—Ç", value: applicationData.age, inline: true },
        { name: "‚è∞ –ü–æ–¥–∞–Ω–∞", value: `<t:${Math.floor(applicationData.timestamp.getTime() / 1000)}:R>`, inline: true },
        {
          name: "‚ùì –ü–æ—á–µ–º—É –∏–º–µ–Ω–Ω–æ –º—ã?",
          value:
            applicationData.whyUs.length > 1024
              ? applicationData.whyUs.substring(0, 1021) + "..."
              : applicationData.whyUs,
        },
        {
          name: "üéØ –£–≤–ª–µ—á–µ–Ω–∏—è",
          value:
            applicationData.hobbies.length > 1024
              ? applicationData.hobbies.substring(0, 1021) + "..."
              : applicationData.hobbies,
        },
        {
          name: "üíº –û–ø—ã—Ç",
          value:
            applicationData.experience.length > 1024
              ? applicationData.experience.substring(0, 1021) + "..."
              : applicationData.experience,
        },
      )
      .setThumbnail(interaction.user.displayAvatarURL({ dynamic: true, size: 256 }))
      .setFooter({ text: `–°–∏—Å—Ç–µ–º–∞ –Ω–∞–±–æ—Ä–∞ ‚Ä¢ ID: ${applicationData.id}` })
      .setTimestamp()

    const approveButton = new ButtonBuilder()
      .setCustomId(`approve_application_${applicationData.id}`)
      .setLabel("‚úÖ –ü—Ä–∏–Ω—è—Ç—å")
      .setStyle(ButtonStyle.Success)

    const rejectButton = new ButtonBuilder()
      .setCustomId(`reject_application_${applicationData.id}`)
      .setLabel("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å")
      .setStyle(ButtonStyle.Danger)

    const buttonRow = new ActionRowBuilder().addComponents(approveButton, rejectButton)

    await adminChannel.send({
      content: `üîî **–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞!** <@&${process.env.ADMIN_ROLE_ID || "ADMIN_ROLE_ID"}>`,
      embeds: [applicationEmbed],
      components: [buttonRow],
    })
  }

  const confirmEmbed = new EmbedBuilder()
    .setTitle("‚úÖ –ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!")
    .setColor("#00FF00")
    .setDescription(`**–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –¥–æ–ª–∂–Ω–æ—Å—Ç—å ${applicationData.positionName} –ø—Ä–∏–Ω—è—Ç–∞ –∫ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—é**`)
    .addFields(
      { name: "üìã ID –∑–∞—è–≤–∫–∏", value: `\`${applicationData.id}\``, inline: true },
      { name: "üíº –î–æ–ª–∂–Ω–æ—Å—Ç—å", value: applicationData.positionName, inline: true },
      {
        name: "‚è∞ –í—Ä–µ–º—è –ø–æ–¥–∞—á–∏",
        value: `<t:${Math.floor(applicationData.timestamp.getTime() / 1000)}:F>`,
        inline: true,
      },
    )
    .setFooter({ text: "–û–∂–∏–¥–∞–π—Ç–µ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–µ–π" })
    .setTimestamp()

  await interaction.reply({ embeds: [confirmEmbed], ephemeral: true })
}

async function handleApplicationApproval(interaction, approved) {
  const applicationId = interaction.customId.split("_")[2]
  const application = applications.get(applicationId)

  if (!application) {
    await interaction.reply({
      content: "‚ùå **–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞**\n–í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω–∞ —É–∂–µ –±—ã–ª–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –∏–ª–∏ —É–¥–∞–ª–µ–Ω–∞.",
      ephemeral: true,
    })
    return
  }

  const user = await client.users.fetch(application.userId)
  const adminUser = interaction.user

  if (approved) {
    const guild = interaction.guild
    const member = await guild.members.fetch(application.userId)
    const staffRole = CONFIG.STAFF_POSITIONS[application.position]

    if (staffRole.roleId) {
      try {
        await member.roles.add(staffRole.roleId)
        console.log(`‚úÖ –†–æ–ª—å ${staffRole.name} –≤—ã–¥–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${user.username}`)
      } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–¥–∞—á–µ —Ä–æ–ª–∏: ${error}`)
      }
    }

    const acceptEmbed = new EmbedBuilder()
      .setTitle("üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∞!")
      .setColor("#00FF00")
      .setDescription(
        `**–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫–æ–º–∞–Ω–¥—É!**\n\n–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –¥–æ–ª–∂–Ω–æ—Å—Ç—å **${application.positionName}** –±—ã–ª–∞ —É—Å–ø–µ—à–Ω–æ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∞ –∏ –æ–¥–æ–±—Ä–µ–Ω–∞ –Ω–∞—à–µ–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–µ–π.${staffRole.roleId ? "\n\nüé≠ **–†–æ–ª—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–¥–∞–Ω–∞!**" : ""}`,
      )
      .addFields(
        { name: "üìã ID –∑–∞—è–≤–∫–∏", value: `\`${applicationId}\``, inline: true },
        { name: "üíº –î–æ–ª–∂–Ω–æ—Å—Ç—å", value: application.positionName, inline: true },
        { name: "üë®‚Äçüíº –†–∞—Å—Å–º–æ—Ç—Ä–µ–ª", value: adminUser.displayName || adminUser.username, inline: true },
        { name: "‚è∞ –í—Ä–µ–º—è –ø—Ä–∏–Ω—è—Ç–∏—è", value: `<t:${Math.floor(Date.now() / 1000)}:F>`, inline: false },
      )
      .setFooter({ text: "–°–∫–æ—Ä–æ —Å –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–∏—Ö –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π" })
      .setTimestamp()

    try {
      await user.send({ embeds: [acceptEmbed] })
    } catch (error) {
      console.log(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –õ–° –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${user.username}`)
    }

    await interaction.reply({
      content: `‚úÖ **–ó–∞—è–≤–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∞!**\nüë§ –ö–∞–Ω–¥–∏–¥–∞—Ç: <@${application.userId}>\nüíº –î–æ–ª–∂–Ω–æ—Å—Ç—å: **${application.positionName}**${staffRole.roleId ? "\nüé≠ –†–æ–ª—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–¥–∞–Ω–∞" : ""}\nüì® –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è`,
      ephemeral: true,
    })
  } else {
    const rejectEmbed = new EmbedBuilder()
      .setTitle("üòî –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞")
      .setColor("#FF0000")
      .setDescription(
        `–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –¥–æ–ª–∂–Ω–æ—Å—Ç—å **${application.positionName}** –±—ã–ª–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ –Ω–∞—à–µ–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–µ–π.`,
      )
      .addFields(
        { name: "üìã ID –∑–∞—è–≤–∫–∏", value: `\`${applicationId}\``, inline: true },
        { name: "üíº –î–æ–ª–∂–Ω–æ—Å—Ç—å", value: application.positionName, inline: true },
        { name: "üë®‚Äçüíº –†–∞—Å—Å–º–æ—Ç—Ä–µ–ª", value: adminUser.displayName || adminUser.username, inline: true },
        { name: "‚è∞ –í—Ä–µ–º—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è", value: `<t:${Math.floor(Date.now() / 1000)}:F>`, inline: false },
      )
      .setFooter({ text: "–ù–µ —Ä–∞—Å—Å—Ç—Ä–∞–∏–≤–∞–π—Ç–µ—Å—å! –í—ã –º–æ–∂–µ—Ç–µ –ø–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É –ø–æ–≤—Ç–æ—Ä–Ω–æ —á–µ—Ä–µ–∑ –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è" })
      .setTimestamp()

    try {
      await user.send({ embeds: [rejectEmbed] })
    } catch (error) {
      console.log(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –õ–° –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${user.username}`)
    }

    await interaction.reply({
      content: `‚ùå **–ó–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞**\nüë§ –ö–∞–Ω–¥–∏–¥–∞—Ç: <@${application.userId}>\nüíº –î–æ–ª–∂–Ω–æ—Å—Ç—å: **${application.positionName}**\nüì® –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è`,
      ephemeral: true,
    })
  }

  const updatedEmbed = EmbedBuilder.from(interaction.message.embeds[0])
    .setColor(approved ? "#00FF00" : "#FF0000")
    .setFooter({
      text: `–°–∏—Å—Ç–µ–º–∞ –Ω–∞–±–æ—Ä–∞ ‚Ä¢ ${approved ? "‚úÖ –ü–†–ò–ù–Ø–¢–û" : "‚ùå –û–¢–ö–õ–û–ù–ï–ù–û"} ‚Ä¢ ${adminUser.displayName || adminUser.username} ‚Ä¢ ID: ${applicationId}`,
    })

  await interaction.message.edit({ embeds: [updatedEmbed], components: [] })

  applications.delete(applicationId)
}

process.on("unhandledRejection", (reason, promise) => {
  console.error("‚ùå –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –ø—Ä–æ–º–∏—Å–∞:", reason)
})

process.on("uncaughtException", (error) => {
  console.error("‚ùå –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ:", error)
  process.exit(1)
})

validateConfig()

client.login(CONFIG.TOKEN).catch((error) => {
})
